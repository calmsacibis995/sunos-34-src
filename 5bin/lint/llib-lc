/*	@(#)llib-lc 1.1 86/09/24 SMI; from S5R2 2.14	*/
/*LINTLIBRARY*/
#include <stdio.h>
#include <sys/param.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <sys/sem.h>
#include <pwd.h>
#include <signal.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <sys/uio.h>

/* ACCEPT(2) */
int	accept(s, a, l) struct sockaddr *a; int *l; { return (s); }
/* ACCESS(2) */
int	access(f, m) char *f; { return (m); }
/* ACCT(2) */
int	acct(f) char *f; { return (0); }
/* ADJTIME(2) */
int	adjtime(delta, odelta) struct timeval *delta, *odelta; { return 0; }
/* ALARM(2) */
unsigned	alarm(s) unsigned s; { return (s); }
/* BIND(2) */
int	bind(s, n, l) struct sockaddr *n; { return (0); }
/* BRK(2) */
int	brk(e) char *e; { return (0); }
char *	sbrk(i) { return (""); }
/* CHDIR(2) */
int	chdir(s) char *s; { return (0); }
/* CHMOD(2) */
int	chmod(s, m) char *s; { return (m); }
int	fchmod(f, m) { return(m); }
/* CHOWN(2) */
int	chown(s, o, g) char *s; { return (o); }
int	fchown(f, o, g) { return(o); }
/* CHROOT(2) */
int	chroot(p) char *p; { return (0); }
/* CLOSE(2) */
int	close(f) { return (f); }
/* CONNECT(2) */
int	connect(s, n, l) struct sockaddr *n; { return (0); }
/* CREAT(2) */
int	creat(s, m) char *s; { return (m); }
/* DUP(2) */
int	dup(f) { return (f); }
/* EXEC(2) */
char **	environ;
	/*VARARGS2*/
int	execl(f, a) char *f, *a; { return (0); }
int	execv(s, v) char *s, *v[]; { return (0); }
	/*VARARGS2*/
int	execle(f, a, e) char *f, *a, *e[]; { return (0); }
int	execve(f, a, e) char *f, *a[], *e[]; { return (0); }
	/*VARARGS2*/
int	execlp(f, a) char *f, *a; { return (0); }
int	execvp(s, v) char *s, *v[]; { return (0); }
/* EXIT(2) */
void	exit(s) {}
void	_exit(s) {}
/* FCNTL(2) */
int	fcntl(f, c, a) { return (f); }
/* FLOCK(2) */
int	flock(f, o) { return (f); }
/* FORK(2) */
int	fork() { return (0); }
/* FSYNC(2) */
int	fsync(f) { return (0); }
/* GETDIRENTRIES(2) */
int	getdirentries(d, b, n, p) char *b; long *p; { return (0); }
/* GETDOMAINNAME(2) */
int	getdomainname(n, l) char *n; int l; { return (0) ;}
int	setdomainname(n, l) char *n; int l; { return (0) ;}
/* GETDTABLESIZE(2) */
int	getdtablesize() { return (0); }
/* GETGROUPS(2) */
int	getgroups(n, g) int *g; { return (0); }
/* GETHOSTID(2) */
long	gethostid() { return (0L); }
/* GETHOSTNAME(2) */
int	gethostname(n, l) char *n; int l; { return (0) ;}
int	sethostname(n, l) char *n; int l; { return (0) ;}
/* GETITIMER(2) */
int	getitimer(w, v) struct itimerval *v; { return (0); }
int	setitimer(w, v, ov) struct itimerval *v, *ov; { return (0); }
/* GETPAGESIZE(2) */
int	getpagesize() { return (0); }
/* GETPEERNAME(2) */
int	getpeername(s, n, l) struct sockaddr *n; int *l; { return (0); }
/* GETPID(2) */
int	getpid() { return (0); }
int	getpgrp() { return (0); }
int	getppid() { return (0); }
/* GETPRIORITY(2) */
int	getpriority(w, who) { return (0); }
int	setpriority(w, who, pri) { return (0); }
/* GETRLIMIT(2) */
#include <sys/resource.h>
int	getrlimit(res, rip) struct rlimit *rip; { return (0); }
int	setrlimit(res, rip) struct rlimit *rip; { return (0); }
/* GETRUSAGE(2) */
int	getrusage(res, rip) struct rusage *rip; { return (0); }
/* GETSOCKNAME(2) */
int	getsockname(s, name, namelen) struct sockaddr *name; int *namelen; { return(0); }
/* GETSOCKOPT(2) */
int	getsockopt(s, level, opt, buf, lenp) char *buf; int *lenp; { return (0); }
int	setsockopt(s, level, opt, buf, len) char *buf; { return (0); }
/* GETTIMEOFDAY(2) */
int	gettimeofday(t, z) struct timeval *t; struct timezone *z; { return (0);}
int	settimeofday(t, z) struct timeval *t; struct timezone *z; { return (0);}
/* GETUID(2) */
int	getuid() { return (0); }
int	geteuid() { return (0); }
int	getgid() { return (0); }
int	getegid() { return (0); }
/* IOCTL(2) */
	/*VARARGS2*/
int	ioctl(f, r, a) { return (f); }
/* KILL(2) */
int	kill(i, s) { return (i); }
/* KILLPG(2) */
int	killpg(pg, s) { return (0); }
/* LINK(2) */
int	link(a, b) char *a, *b; { return (0); }
/* LISTEN(2) */
int	listen(s, b) { return (0); }
/* LSEEK(2) */
long	lseek(f, o, w) long o; { return (o); }
#if pdp11
/* MAUS(2) PDP-11 IPC */
int	dismaus(s) char *s; { return (0); }
char *	enabmaus(m) { return (""); }
int	freemaus(m) { return (m); }
int	getmaus(p, o) char *p; { return (o); }
char *	switmaus(m, s) char *s; { return (s); }
#endif
#ifdef notdef
int	madvise(a, l, b) char *a; int l, b; { return (0); }
#endif
int	mmap(a, l, p, s, f, o) char *a; off_t o; { return (0); }
#ifdef notdef
int	mincore(a, l, v) char *a; int l; char *v; { return (0); }
#endif
/* MKDIR(2) */
int	mkdir(p, m) char *p; { return (0); }
/* MKNOD(2) */
int	mknod(n, m, d) char *n; { return (m); }
/* MOUNT(2) */
int	mount(s, d, r) char *s, *d; { return (r); }
#ifdef notdef
int	mprotect(a, l, p) char *a; { return (0); }
int	mremap(a, l, p, s, f) char *a, f; { return (0); }
#endif
int	munmap(a, l) char *a; { return (0); }
/* MSGCTL(2) */
int	msgctl(m, c, b) struct msqid_ds *b; { return (m); }
/* MSGGET(2) */
int	msgget(k, m) key_t k; { return (m); }
/* MSGOP(2) */
int	msgsnd(q, p, s, f) struct msgbuf *p; { return (q); }
int	msgrcv(q, p, s, t, f) struct msgbuf *p; long t; { return (q); }
/* NFSSVC(2) */
void	nfssvc(s) int s; {}
void	async_daemon() {}
/* NICE(2) */
int	nice(i) { return (i); }
/* OPEN(2) */
	/*VARARGS2*/
int	open(f, o, m) char *f; { return (o); }
/* PAUSE(2) */
int	pause() { return (0); }
/* PIPE(2) */
int	pipe(f) int f[2]; { return (0); }
/* PLOCK(2) */
int	plock(o) { return (o); }
/* PROFIL(2) */
void	profil(b, s, o, i) char *b; {}
/* PTRACE(2) */
int	ptrace(r, i, a, d) { return (r); }
/* READ(2) */
int	read(f, b, n) char *b; unsigned n; { return (f); }
int	readv(f, v, l) struct iovec *v; { return (f); }
/* READLINK(2) */
int	readlink(p, b, s) char *p, *b; { return (0); }
/* REBOOT(2) */
int	reboot(h) { return(0); }
/* RECV(2) */
int	recv(s, b, l, f) char *b; { return (l); }
int	recvfrom(s, b, l, f, fr, fl) char *b; struct sockaddr *fr; int *fl;
		{ return (l); }
int	recvmsg(s, m, f) struct msghdr m[]; { return (0); }
/* RENAME(2) */
int	rename(f, t) char *f, *t; { return (0); }
/* RMDIR(2) */
int	rmdir(p) char *p; { return (0); }
/* SELECT(2) */
int	select(n, r, w, e, t) int *r, *w, *e; struct timeval *t; { return (n); }
/* SEMCTL(2) */
	/*VARARGS3*/
int	semctl(i, n, c, a) union semun a; { return (i); }
/* SEMGET(2) */
int	semget(k, n, s) key_t k; { return (n); }
/* SEMOP(2) */
int	semop(i, o, n) struct sembuf **o; { return (i); }
/* SEND(2) */
int	send(s, m, l, f)  char *m; { return (l); }
int	sendto(s, m, l, f, t, tl) char *m; struct sockaddr *t; { return (l); }
int	sendmsg(s, m, l) struct msghdr m[]; { return (l); }
/* SETGROUPS(2) */
int	setgroups(n, g) int *g; { return (0); }
/* SETPGRP(2) */
int	setpgrp() { return (0); }
/* SETREGID(2) */
int	setregid(r, e) { return (0); }
/* SETREUID(2) */
int	setreuid(r, e) { return (0); }
/* SHMCTL(2) */
#include <sys/shm.h>
int	shmctl(s, c, b) struct shmid_ds *b; { return (s); }
/* SHMGET(2) */
int	shmget(k, s, f) key_t k; { return (s); }
/* SHMOP(2) */
char *	shmat(i, a, f) char *a; { return (a); }
int	shmdt(a) char *a; { return (0); }
/* SHUTDOWN(2) */
int	shutdown( s, h ){ return 0;}
/* SIGBLOCK(2) */
int	sigblock(m) { return (m); }
/* SIGNAL(2) */
int (*	signal(s, a))() int (*a)(); { return (a); }
/* SIGPAUSE(2) */
int	sigpause(m) { return(0); }
/* SIGSETMASK(2) */
int	sigsetmask(m) { return (m); }
/* SIGSTACK(2) */
int	sigstack(ss, oss) struct sigstack *ss, *oss; { return (0); }
/* SIGVEC(2) */
int	sigvec(sig, vec, ovec) int sig; struct sigvec *vec, *ovec; { return (0); }
/* SOCKET(2) */
int	socket(a, t, p) { return (0); }
/* SOCKETPAIR(2) */
int	socketpair(d, t, p, s ) int s[2]; { return (0); }
/* STAT(2) */
#include <sys/stat.h>
int	stat(s, b) char *s; struct stat *b; { return (0); }
int	fstat(f, b) struct stat *b; { return (f); }
int	lstat(s, b) char *s; struct stat *b; { return (0); }
/* STIME(2) */
int	stime(t) long *t; { return (0); }
#ifdef notdef
char *	stk( a ) char * a; { return a; }
char *	sstk( a ) int a; { return (char *)0; }
#endif
/* SWAPON(2) */
int	swapon(s) char *s; { return (0); }
/* SYMLINK(2) */
int	symlink(t, f) char *t, *f; { return (0); }
/* SYNC(2) */
void	sync() {}
#if u3b || u3b5
/* SYS3B(2) (3B20 and 3B5 only) */
	/*VARARGS2*/
void	sys3b(c, a, b) {}
#endif
/* TIME */
long	time(t) long *t; { return (0L);}
/* TIMES(2) */
#include <sys/times.h>
long	times(b) struct tms *b; { return (0L); }
/* TRUNCATE(2) */
int	truncate(p, l) char *p; off_t l; { return (0); }
int	ftruncate(d, l) off_t l; { return (0); }
/* ULIMIT(2) */
daddr_t	ulimit(c, n) daddr_t n; { return (n); }
/* UMASK(2) */
int	umask(c) { return (c); }
/* UMOUNT(2) */
int	umount(s) char *s; { return (0); }
/* UNMOUNT(2) */
int	unmount(s) char *s; { return (0); }
/* UNAME(2) */
#include <sys/utsname.h>
int	uname(n) struct utsname *n; { return (0); }
/* UNLINK(2) */
int	unlink(s) char *s; { return (0); }
/* USTAT(2) */
#include <ustat.h>
int	ustat(d, b) struct ustat *b; { return (d); }
/* UTIME(2) */
int	utime(f, t) char *f; struct { time_t x, y; } *t; { return (0); }
/* UTIMES(2) */
int	utimes( f, t ) char *f; struct timeval *t; { return 0 ;}
/* VFORK(2) */
int	vfork() { return(0); }
/* VHANGUP(2) */
void	vhangup() {}
/* WAIT(2) */
int	wait(s) int *s; { return (0); }
/* WRITE(2) */
int	write(f, b, n) char *b; unsigned n; { return (f); }
int	writev(f, v, l) struct iovec *v; {return (f); }

/* A64L(3C) */
long	a64l(s) char *s; { return (0L); }
char *	l64a(l) long l; { return (""); }
/* ABORT(3C) */
int	abort() { return (0); }
/* ABS(3C) */
int	abs(i) { return (i); }
/* ASSERT(3X) */
void	_assert(a, f, n) char *a, *f; {}
/* BSEARCH(3C) */
char *	bsearch(k, b, n, w, c) char *k, *b; unsigned n, w; int (*c)(); { return (k); }
/* BSTRING(3C) */
void	bcopy(b1, b2, l) char *b1, *b2; {}
int	bcmp(b1, b2, l) char *b1, *b2; { return (0); }
void	bzero(b, l) char *b; {}
int	ffs(i) int i; { return (0); }
/* BYTEORDER(3N) */
#ifndef ntohl
u_long	ntohl(netlong) u_long netlong; { return netlong; }
#endif ntohl
#ifndef ntohs
u_short	ntohs(netshort) u_short netshort; { return netshort; }
#endif ntohs
/* CLOCK(3C) */
long	clock() { return (0L); }
/* CONV(3C) */
#undef _toupper
#undef _tolower
#undef toascii
int	toupper(i) { return (i); }
int	tolower(i) { return (i); }
int	_toupper(i) { return (i); }
int	_tolower(i) { return (i); }
int	toascii(i) { return (i); }
/* CRYPT(3C) */
char *	crypt(k, s) char *k, *s; { return (k); }
void	setkey(k) char *k; {}
void	encrypt(b, e) char *b; {}
/* CTERMID(3S) */
char *	ctermid(s) char *s; { return (s); }
/* CTIME(3C) */
char *	ctime(t) long *t; { return (""); }
struct tm *	localtime(c) long *c; { static struct tm x; return (&x); }
struct tm *	gmtime(c) long *c; { static struct tm x; return (&x); }
char *	asctime(t) struct tm *t; { return (""); }
void	tzset() {}
long	timezone;
int	daylight;
char *	tzname[2];
/* CTYPE(3C) */
#undef isalpha
#undef isupper
#undef islower
#undef isdigit
#undef isxdigit
#undef isalnum
#undef isspace
#undef ispunct
#undef isprint
#undef isgraph
#undef iscntrl
#undef isascii
int	isalpha(c) { return (c); }
int	isupper(c) { return (c); }
int	islower(c) { return (c); }
int	isdigit(c) { return (c); }
int	isxdigit(c) { return (c); }
int	isalnum(c) { return (c); }
int	isspace(c) { return (c); }
int	ispunct(c) { return (c); }
int	isprint(c) { return (c); }
int	isgraph(c) { return (c); }
int	iscntrl(c) { return (c); }
int	isascii(c) { return (c); }
char	_ctype_[129];
/* CUSERID(3S) */
char *	cuserid(s) char *s; { return (s); }
/* DIRECTORY(3X) */
#include <sys/dir.h>
void	closedir(d) DIR *d; {}
DIR *	opendir(f) char *f; { return (DIR *)0; }
struct direct	*readdir(d) DIR *d; { return (struct direct *)0; }
void	seekdir(d, l) DIR *d; long l; {}
long	telldir(d) DIR *d; { return 0L; }
/* DRAND48(3C) */
double	drand48() { return (0.0); }
double	erand48(x) unsigned short x[3]; { return (0.0); }
long	lrand48() { return (0L); }
long	nrand48(x) unsigned short x[3]; { return (0L); }
long	mrand48() { return (0L); }
long	jrand48(x) unsigned short x[3]; { return (0L); }
void	srand48(s) long s; {}
unsigned short *	seed48(s) unsigned short s[3]; { return (s); }
void	lcong48(p) unsigned short p[7]; {}
/* ECVT(3C) */
char *	ecvt(v, n, d, s) double v; int *d, *s; { return (""); }
char *	fcvt(v, n, d, s) double v; int *d, *s; { return (""); }
char *	gcvt(v, n, b) double v; char *b; { return (b); }
/* END(3C) */
int	end, etext, edata;
/* FCLOSE(3S) */
int	fclose(f) FILE *f; { return (0); }
int	fflush(f) FILE *f; { return (0); }
/* FERROR(3S) */
#undef feof
#undef ferror
#undef clearerr
#undef fileno
int	feof(f) FILE *f; { return (0); }
int	ferror(f) FILE *f; { return (0); }
void	clearerr(f) FILE *f; {}
int	fileno(f) FILE *f; { return (0); }
/* FOPEN(3S) */
FILE *	fopen(f, t) char *f, *t; { return (stdin); }
FILE *	freopen(f, t, s) char *f, *t; FILE *s; { return (s); }
FILE *	fdopen(f, t) char *t; { return (stdin); }
/* FPTRAP(3X) */
/* FREAD(3S) */
int	fread(b, s, n, f) char *b; FILE *f; { return (n); }
int	fwrite(b, s, n, f) char *b; FILE *f; { return (n); }
/* FREXP(3C) */
double	frexp(x, e) double x; int *e; { return (x); }
double	ldexp(v, e) double v; { return (v); }
double	modf(v, i) double v, *i; { return (v); }
/* FSEEK(3S) */
int	fseek(f, o, p) FILE *f; long o; { return (p); }
long	ftell(f) FILE *f; { return (0L); }
void	rewind(f) FILE *f; {}
/* FTW(3C) */
int	ftw(p, f, d) char *p; int (*f)(); { return (d); }
/* GETC(3S) */
#undef getc
#undef getchar
int	getc(f) FILE *f; { return (0); }
int	getchar() { return (0); }
int	fgetc(f) FILE *f; { return (0); }
int	getw(f) FILE *f; { return (0); }
/* GETCWD(3C) */
char *	getcwd(b, s) char *b; { return (b); }
/* GETENV(3C) */
char *	getenv(n) char *n; { return (n); }
/* GETFSENT(3C) */
#include <fstab.h>
struct fstab *	getfsent() { return (struct fstab *)0; }
struct fstab *	getfsspec(n) char *n; { return (struct fstab *)0; }
struct fstab *	getfsfile(n) char *n; { return (struct fstab *)0; }
struct fstab *	getfstype(t) char *t; { return (struct fstab *)0; }
int	setfsent() { return (0); }
int	endfsent() { return (0); }
/* GETGRENT(3C) */
#include <grp.h>
struct group *	getgrent() { static struct group x; return (&x); }
struct group *	getgrgid(g) { static struct group x; return (&x); }
struct group *	getgrnam(n) char *n; { static struct group x; return (&x); }
void	setgrent() {}
void	endgrent() {}
struct group *	fgetgrent(f) FILE *f; { static struct group x; return (&x); }
/* GETHOSTENT(3N) */
#include <netdb.h>
struct hostent *gethostent() { static struct hostent x; return (&x); }
struct hostent *gethostbyname(n) char *n; { static struct hostent x; return (&x); }
struct hostent *gethostbyaddr(a, l, t) char *a; { static struct hostent x; return (&x); }
void	sethostent(s) {}
void	endhostent() {}
/* GETNETENT(3N) */
struct netent *getnetent() { static struct netent x; return (&x); }
struct netent *getnetbyname(n) char *n; { static struct netent x; return (&x); }
struct netent *getnetbyaddr(n, t) { static struct netent x; return (&x); }
void	setnetent(s) {}
void	endnetent() {}
/* GETNETGRENT(3N) */
int	innetgr(g, m, u, d) char *g, *m, *u, *d; { return (0); }
void	setnetgrent(g) char *g; {}
void	endnetgrent() {}
int	getnetgrent(m, u, d) char **m, **u, **d; { return (0); }
/* GETPROTOENT(3N) */
struct protoent *getprotoent() { static struct protoent x; return (&x); }
struct protoent *getprotobyname(n) char *n; { static struct protoent x; return (&x); }
struct protoent *getprotobynumber(p) { static struct protoent x; return (&x); }
void	setprotoent(s) {}
void	endprotoent() {}
/* GETSERVENT(3N) */
struct servent *getservent() { static struct servent x; return (&x); }
struct servent *getservbyname(n, p) char *n, *p; { static struct servent x; return (&x); }
struct servent *getservbyport(port, p) char *p; { static struct servent x; return (&x); }
void	setservent(s) {}
void	endservent() {}
/* GETLOGIN(3C) */
char *	getlogin() { return (""); }
/* GETMNTENT(3C) */
#include <mntent.h>
FILE *	setmntent(f, t) char *f, *t; { return (0); }
struct mntent *getmntent(f) FILE *f; { static struct mntent x; return (&x); }
int	addmntent(f, m) FILE *f; struct mntent *m; { return (0); }
char *	hasmntopt(m, o) struct mntent *m; char *o; { return (0); }
int	endmntent(f) FILE *f; { return (0); }
/* GETOPT(3C) */
int	getopt(c, v, o) char **v, *o; { return (c); }
char *	optarg;
int	optind;
int	opterr;
int	optopt; /* undocumented */
/* GETPASS(3C) */
char *	getpass(s) char *s; { return (s); }
/* GETPW(3C) */
int	getpw(u, b) char *b; { return (u); }
/* GETPWENT(3C) */
struct passwd *	getpwent() { static struct passwd x; return (&x); }
struct passwd *	getpwuid(u) { static struct passwd x; return (&x); }
struct passwd *	getpwnam(n) char *n; { static struct passwd x; return (&x); }
void	setpwent() {}
void	endpwent() {}
struct passwd *	fgetpwent(f) FILE *f; { static struct passwd x; return (&x); }
/* GETS(3S) */
char *	gets(s) char *s; { return (s); }
char *	fgets(s, n, f) char *s; FILE *f; { return (s); }
/* GETUT(3C) -- omitted */
/* GETWD(3C) */
char *	getwd(p) char *p; { return (p); }
/* HSEARCH(3C) */
#include <search.h>
ENTRY *	hsearch(i, a) ENTRY i; ACTION a; { return (&i); }
int	hcreate(n) unsigned n; { return (0); }
void	hdestroy() {}
/* INET(3N) */
#include <netinet/in.h>
#include <arpa/inet.h>
u_long	inet_addr(cp) char *cp; { return (0); }
u_long	inet_network(cp) char *cp; { return (0); }
struct in_addr inet_makeaddr(n, l) { static struct in_addr x; return (x); }
int	inet_lnaof(in) struct in_addr in; { return (0); }
int	inet_netof(in) struct in_addr in; { return (0); }
char *	inet_ntoa(in) struct in_addr in; { return (""); }
/* INITGROUPS(3C) */
int	initgroups(n, g) char *n; { return (0); }
/* INSQUE(3C) */
struct qelem {
	struct qelem *q_forw;
	struct qelem *q_back;
	char	q_data[1];
};
void	insque(e, p) struct qelem *e, *p; {}
void	remque(e) struct qelem *e; {}
/* ISINF(3C) */
int	isinf(v) double v; { return (0); }
int	isnan(v) double v; { return (0); }
/* L3TOL(3C) */
void	l3tol(l, c, n) long *l; char *c; {}
void	ltol3(c, l, n) char *c; long *l; {}
/* LD...(3X) libld -- shouldn't be documented in Section 3! */
/* LOGNAME(3X) libPW -- shouldn't be documented */
/* LSEARCH(3C) */
char *	lsearch(k, b, n, w, c) char *k, *b; unsigned *n, w; int (*c)(); { return (k); }
char *	lfind(k, b, n, w, c) char *k, *b; unsigned *n, w; int (*c)(); { return (k); }
/* MALLOC(3C) */
#include <malloc.h>
char *	malloc(s) unsigned s; { return (""); }
void	free(s) char *s; {}
char *	realloc(s, n) char *s; unsigned n; { return (s); }
char *	calloc(n, e) unsigned n, e; { return (""); }
char *	memalign(a, s) unsigned a, s; { return(""); }
char *	valloc(s) unsigned s; { return (""); }
int	mallopt (cmd, value) int cmd, value; { return cmd+value; }
struct	mallinfo mallinfo () { struct mallinfo s; return (s); }
/* MEMORY(3C) */
char *	memccpy(a, b, c, n) char *a, *b; { return (a); }
char *	memchr(s, c, n) char *s; { return (s); }
int	memcmp(a, b, n) char *a, *b; { return (n); }
char *	memcpy(a, b, n) char *a, *b; { return (a); }
char *	memset(s, c, n) char *s; { return (s); }
/* MKTEMP(3C) */
char *	mktemp(t) char *t; { return (t); }
/* MONITOR(3C) */
#include <mon.h>
void	monitor(l, h, b, s, n) int (*l)(), (*h)(); WORD *b; {}
void	monstartup(l, h) int (*l)(), (*h)(); {}
void	moncontrol(m) int m; {}
/* NLIST(3C) */
#include <a.out.h>
int	nlist(f, n) char *f; struct nlist *n; { return (0); }
/* ON_EXIT(3C) */
int	on_exit(p, a) void (*p)(); char *a; { return (0); }
/* PERROR(3C) */
void	perror(s) char *s; {}
void	_perror(s) char *s; {}
int	errno;
char *	sys_errlist[1];
int	sys_nerr;
/* PLOT(3X) not in libc */
/* POPEN(3S) */
FILE *	popen(c, t) char *c, *t; { return (stdin); }
int	pclose(f) FILE *f; { return (0); }
/* PRINTF(3S) */
	/*VARARGS1 PRINTFLIKE1*/
int	printf(s) char *s; { return (0); }
	/*VARARGS2 PRINTFLIKE2*/
int	fprintf(f, s) FILE *f; char *s; { return (0); }
	/*VARARGS2 PRINTFLIKE2*/
int	sprintf(p, s) char *p, *s; { return (0); }
/* PSIGNAL(3C) */
void	psignal(sig, s) unsigned sig; char *s; {}
void	_psignal(sig, s) unsigned sig; char *s; {}
char *	sys_siglist[1];
/* PUTC(3S) */
#undef putc
#undef putchar
int	putc(c, f) FILE *f; { return (c); }
int	putchar(c) { return (c); }
int	fputc(c, f) FILE *f; { return (c); }
int	putw(w, f) FILE *f; { return (w); }
/* PUTENV(3C) */
int	putenv(s) char *s; { return (0); }
/* PUTPWENT(3C) */
int	putpwent(s, f) struct passwd *s; FILE *f; { return (0); }
/* PUTS(3S) */
int	puts(s) char *s; { return (0); }
int	fputs(s, f) char *s; FILE *f; { return (0); }
/* QSORT(3C) */
void	qsort(b, n, w, c) char *b; unsigned n, w; int (*c)(); {}
/* RAND(3C) */
void	srand(s) unsigned s; {}
int	rand() { return (0); }
/* REGCMP(3X) libPW */
/* RANDOM(3C) */
long	random() { return (0L); }
void	srandom(s) int s; {}
char *	initstate(s, st, n) unsigned s; char *st; { return st; }
char *	setstate(st) char *st; { return st; }
/* RCMD(3N) */
int	rcmd(a, i, l, r, c, f) char **a; u_short i; char *l, *r, *c; int *f;
		{ return (0); }
int	rresvport(p) int *p; { return (0); }
int	ruserok(rhost, s, r, l) char *rhost, *r, *l; { return (0); }
/* REXEC(3N) */
int	rexec(a, i, u, p, c, f) char **a; u_short i; char *u, *p, *c; int *f;
		{ return (0); }
/* REGEX(3C) */
char *	re_comp(s) char *s; { return (s); }
int	re_exec(s) char *s; { return (0); }
/* SCANDIR(3C) */
int	scandir(d, n, s, c) char *d; struct direct *(*n[]); int (*s)(),(*c)();
		{ return (0); }
int	alphasort(d1, d2) struct direct **d1, **d2; { return (0); }
/* SCANF(3S) */
	/*VARARGS1 SCANFLIKE1*/
int	scanf(s) char *s; { return (0); }
	/*VARARGS2 SCANFLIKE2*/
int	fscanf(f, s) FILE *f; char *s; { return (0); }
	/*VARARGS2 SCANFLIKE2*/
int	sscanf(p, s) char *p, *s; { return (0); }
/* SETBUF(3S) */
void	setbuf(f, b) FILE *f; char *b; {}
void	setlinebuf(f) FILE *f; {}
int	setvbuf(f, t, b, s) FILE *f; char *b; { return (t); }
/* SETJMP(3C) */
#include <setjmp.h>
int	setjmp(e) jmp_buf e; { return (0); }
int	_setjmp(e) jmp_buf e; { return (0); }
void	longjmp(e, v) jmp_buf e; {}
void	_longjmp(e, v) jmp_buf e; {}
/* SETUID(3) */
int	setuid(u) { return (u); }
int	setgid(g) { return (g); }
int	setruid(u) int u; { return (u); }
int	setrgid(g) int g; { return (g); }
int	seteuid(u) int u; { return (u); }
int	setegid(g) int g; { return (g); }
/* SLEEP(3C) */
unsigned	sleep(n) unsigned n; { return (n); }
/* SSIGNAL(3C) */
int (*	ssignal(s, a))() int (*a)(); { return (a); }
int	gsignal(s) { return (s); }
/* STDIO(3S) */
FILE	_iob[];
/* STDIPC(3C) */
key_t	ftok(s, i) char *s; { return ((key_t)0); }
/* STRING(3C) */
char *	strcat(a, b) char *a, *b; { return (a); }
char *	strncat(a, b, n) char *a, *b; { return (a); }
int	strcmp(a, b) char *a, *b; { return (0); }
int	strncmp(a, b, n) char *a, *b; { return (n); }
char *	strcpy(a, b) char *a, *b; { return (a); }
char *	strncpy(a, b, n) char *a, *b; { return (a); }
int	strlen(s) char *s; { return (0); }
char *	strchr(a, b) char *a, b; { return (a); }
char *	strrchr(a, b) char *a, b; { return (a); }
char *	strpbrk(a, b) char *a, *b; { return (a); }
int	strspn(a, b) char *a, *b; { return (0); }
int	strcspn(a, b) char *a, *b; { return (0); }
char *	strtok(a, b) char *a, *b; { return (a); }
/* STRTOD(3C) */
double	strtod(s, t) char *s, **t; { return (0.0); }
double	atof(s) char *s; { return (0.0); }
/* STRTOL(3C) */
long	strtol(s, t, b) char *s, **t; { return (0L); }
long	atol(s) char *s; { return (0L); }
int	atoi(s) char *s; { return (0); }
/* SWAB(3C) */
void	swab(f, t, n) char *f, *t; {}
/* SYSLOG(3C) */
int	openlog(i, l) char *i; { return (0); }
	/*VARARGS2 PRINTFLIKE2*/
int	syslog(p, s) char *s; { return (0); }
void	closelog() {}
/* SYSTEM(3S) */
int	system(s) char *s; { return (0); }
/* TMPFILE(3S) */
FILE *	tmpfile() { return (stdin); }
/* TMPNAM(3S) */
char *	tmpnam(s) char *s; { return (s); }
char *	tempnam(d, s) char *d, *s; { return (d); }
/* TSEARCH(3C) */
char *	tsearch(k, r, c) char *k, **r; int (*c)(); { return (k); }
char *	tfind(k, r, c) char *k, **r; int (*c)(); { return (k); }
char *	tdelete(k, r, c) char *k, **r; int (*c)(); { return (k); }
void	twalk(r, f) char *r; void (*f)(); {}
/* TTYNAME(3C) */
char *	ttyname(f) { return (""); }
int	isatty(f) { return (f); }
/* TTYSLOT(3C) -- see "UNDOCUMENTED" below */
/* UALARM(3) */
unsigned	ualarm(value, interval) unsigned value, interval; { return 0; }
/* USLEEP(3) */
	usleep(useconds) unsigned useconds; { ; }
/* UNGETC(3S) */
int	ungetc(c, f) FILE *f; { return (c); }
/* VPRINTF(3S) */
#include <varargs.h>
int	vprintf(s, v) char *s; va_list v; { return (0); }
int	vfprintf(f, s, v) FILE *f; char *s; va_list v; { return (0); }
int	vsprintf(p, s, v) char *p, *s; va_list v; { return (0); }
/* YPCLNT(3N) */
#include <rpcsvc/ypclnt.h>
int	yp_bind(i) char *i; { return (0); }
int	yp_get_default_domain(o) char **o; { return (0); }
void	yp_unbind(i) char *i; {}
int	yp_match(id, im, ik, ikl, ov, ovl) char *id, *im, *ik; char **ov; int *ovl;
		{ return (0); }
int	yp_first(id, im, ok, okl, ov, ovl) char *id, *im; char **ok, **ov; int *okl, *ovl;
		{ return (0); }
int	yp_next(id, im, ik, ikl, ok, okl, ov, ovl) char *id, *im, *ik; char **ok, **ov; int *okl, *ovl;
		{ return (0); }
char *	yperr_string(c) { return (""); }

/* UNDOCUMENTED (not for general use) */
	/*VARARGS3*/
int	syscall(n, r, s, a) { return (n); }
long	tell(f) { return (0L); }
int	ttyslot() { return (0); }
int	_filbuf(f) FILE *f; { return (0); }
int	_flsbuf(c, f) FILE *f; { return (c); }
