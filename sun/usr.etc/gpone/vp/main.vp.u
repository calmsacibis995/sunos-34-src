| "@(#)main.vp.u 1.1 86/09/25"
| Copyright (c) 1985 by Sun Microsystems, Inc.

#include "vp.h"

#define BUFLMSK 0xFF
#define BUFVEC1 5
#define BUFVEC2 6

#define postptr r[31]
#define postoffset 0x8
#define cmdptr r[30]
#define frameptr r[29]
#define fbindx r[28]
#define cmd r[0]
#define countr r[10]

	org 0
	debug off

reset:	btstw,s 8,d;		fl2reg->am;	;		;
	;			;		cjp,zer vpinit;	;
	;			;		jmap PP_ORG;	;

gp1_code_ver: movw d,acc;	GP1_CODE_VER->am;crtn,go;	;			  | version number

gp1_board_addr: movw,s d,acc;	GP1_DEFAULT_ADDR->am; crtn,go;	;			  | GP1: top 8 bits of 24-bit VME address
											  | change to GP1_NOTINSTALLED for release

cg2_board_addr0: movw,s d,acc;	CG2_DEFAULT_ADDR->am; crtn,go;	;			  | board #0
											  | change to CG2_NOTINSTALLED for release
cg2_board_addr1: movw,s d,acc;	CG2_NOTINSTALLED->am; crtn,go;	;			  | board #1
cg2_board_addr2: movw,s d,acc;	CG2_NOTINSTALLED->am; crtn,go;	;			  | board #2
cg2_board_addr3: movw,s d,acc;	CG2_NOTINSTALLED->am; crtn,go;	;			  | board #3

gb_board_inq: movw,s d,acc;	GB_CG2_0->am;	crtn,go;	;			  | graphics buffer inquiry routine
											  | change to GB_NOTINSTALLED for release
											  | returns: 0xFFFF if no gb, otherwise
											  | index (0-3) of corresponding cg2 board


	sccsid("GP-1 Microcode 1.0 85/07/17 Copyr 1985 Sun Micro")


vpinit:	;			VERSIONFLG->shmemp;;		;
	movw d,acc;		shmem->am;	;		;
	andw d,acc,acc;		0xFF->am;	;		;			  | set high byte of shared memory location
	bsetw 8,acc;		am->shmem;	;		;			  | VERSIONFLG (2) to 0x1 to indicate
											  | 3.2FCS or later microcode
	;			VERSIONLOC->shmemp;;		;
	;			SW_RELEASE->shmem;;		;		shp+	  | set release number and serial number
	;			SERIAL_NUM->shmem;;		;			  | in VERSIONLOC and VERSIONLOC+1 (508,509)

	movw 0,postptr;		;		push,~go;	;			  | postptr <- 0
	;			PPINIT->fifo1;	loop,f1nf;	;			  | send PPINIT command to PP
	;			;		cjs,go gp1_board_addr;;			  | get GP1 address
	;			;		cjp,neg .-1;	;			  | loop if GP1 addr == GP1_NOTINSTALLED
	movw acc,y;		am->fifo1;	cjp,f1f .;	;			  | send address to PP
	movw 0,acc;		;		cjs,go getfbaddr;;			  | send a valid fb address to PP and 
											  | set fbindx to correct value
	movw 0,acc;		TEXPPFRMPTR->shmemp; ;		;			  | zero acc, load initial value for which
	;			0xffff->shmem;	;		;		shp+	  |  frames texture is on pp = -1.
	;			0xffff->shmem;	;		;			  | Set ptr to 2d texture to -1.

vpidle:	;			postoffset->am;	;		;
	addw d,acc,y;		am->shmemp;	;		;
	movw,s d,cmdptr;	shmem->am;	push,go;	;
	movw,s d,cmdptr;	shmem->am;	loop,~zer;	;
	incw postptr,postptr;	0->shmem;	;		;

getcmd:	movw cmdptr,y;		am->shmemp;	;		;
	rolw 8,d,cmd;		shmem->am;	;		;		shp+
	andw,s d,cmd,y;		0xC0->am;	;		;			  | test bits 6 & 7 of cmd
	andw d,cmd,acc;		0x3F->am;	;		;
	rolw 8,cmd,cmd;		=cmdtbl->am;	;		;
	addw d,acc,y;		am->brreg;	cjp,~zer badcmd;;			  | if cmd bits 6 or 7 are set, goto badcmd
	andw d,cmd,acc;		0xFF->am;	cjp,go;		;

cmdtbl:	btstw,s	7,cmd;		;		jmap EOCL;	;			  | 0
	rolw 9,acc,acc;		;		jmap USEFRAME;	;			  | 1
	subw,s d,fbindx,y;	shmem->am;	jmap PRVEC;	;			  | 2
	subw,s d,fbindx,y;	shmem->am;	jmap PRROPNF;	;			  | 3
	subw,s d,fbindx,y;	shmem->am;	jmap PRROPFF;	;			  | 4
	subw,s d,fbindx,y;	shmem->am;	jmap PRPOLYSOL;	;			  | 5
	movw frameptr,y;	am->shmemp;	jmap SETZBUF;	;			  | 6
	incw cmdptr,cmdptr;	;		jmap SETHIDDENSURF;;			  | 7
	incw cmdptr,cmdptr;	;		jmap SELECTMATRIX;;			  | 8
	negw d,countr;		shmem->am;	jmap MUL_POINT_FLT_2D;;			  | 9
	negw d,countr;		shmem->am;	jmap MUL_POINT_FLT_3D;;			  | 10
	movw d,r[11];		shmem->am;	jmap XFPOLYGON_3D;;			  | 11 (r[11] is nbnds)
	movw d,r[11];		shmem->am;	jmap XFPOLYGON_2D;;			  | 12 (r[11] is nbnds)
	negw d,countr;		shmem->am;	jmap CORENDCVEC_3D;;			  | 13
	negw d,countr;		shmem->am;	jmap CGIVEC;	;			  | 14
	movw,s d,r[0];		shmem->am;	jmap SETCLPLST;	;		shp+	  | 15
	incw cmdptr,cmdptr;	;		jmap SETFBINDX;	;			  | 16
	movw 0,y;		am->fpdp;	jmap SETVWP_3D; ;			  | 17
	movw 0,y;		am->fpdp;	jmap SETVWP_2D; ;			  | 18
	add2nw 1,cmdptr,cmdptr;	shmem->am;	jmap SETROP;	;			  | 19
	incw cmdptr,cmdptr;	;		jmap SETCLIPPLANES;;			  | 20
	negw d,countr;		shmem->am;	jmap MUL_POINT_INT_2D;;			  | 21	
	negw d,countr;		shmem->am;	jmap MUL_POINT_INT_3D;;			  | 22
	incw cmdptr,cmdptr;	;		jmap SETPIXPLANES;;			  | 23
	movw 0,y;		am->fpdp;	jmap SETMATRIX_3D;;			  | 24
	negw d,countr;		shmem->am;	jmap XFVEC_3D;	;			  | 25
	;			;		jmap badcmd;	;			  | 26
|	mov2nw 1,acc;		shmem->am;	jmap PASSTHRU;	;		shp+	  | 26
	negw d,countr;		shmem->am;	jmap XFVEC_2D;	;			  | 27
	incw cmdptr,cmdptr;	;		jmap SETCOLOR;	;			  | 28
	movw 0,y;		am->fpdp;	jmap SETMATRIX_2D;;			  | 29
	movw d,r[11];		shmem->am;	jmap CORENDCPOLY_3D;;			  | 30 (r[11] is nbnds)
	;			;		jmap badcmd;	;			  | 31
|	;			;		jmap ZOOM;	;			  | 31
	rolw 5,d,acc;		shmem->am;	jmap MATMUL_2D;	;		shp+	  | 32
	rolw 5,d,acc;		shmem->am;	jmap MATMUL_3D;	;		shp+	  | 33
	movw 0,y;		am->fpdp;	jmap GETMATRIX_2D;;			  | 34
	movw 0,y;		am->fpdp;	jmap GETMATRIX_3D;;			  | 35
	negw d,countr;		shmem->am;	jmap COREWLDVECNDC_3D;;			  | 36
	movw d,r[11];		shmem->am;	jmap COREWLDPOLYNDC_3D;;		  | 37 (r[11] is nbnds)
	movw d,r[11];		shmem->am;	jmap PROC_PGON_FLT_2D; ;		  | 38 (r[11] is nbnds)
|	mov2nw 12,acc;		;		jmap SET_5080_TEX; ;			  | 39 Set 5080 line texture.
	;			;		jmap badcmd;	;			  | 39
	subw,s d,fbindx,y;	shmem->am;	jmap PR_LINE;	;			  | 40 Textured & fat vectors.
	subw,s d,fbindx,y;	shmem->am;	jmap PR_POLYLINE; ;			  | 41 Textured & fat polylines.
	incw,s 0,y;		;		jmap SET_LINE_TEX; ;			  | 42 Set line texture.
	movw 0,y;		am->fpdp;	jmap SET_LINE_WIDTH; ;			  | 43 Set line width.
	negw d,countr;		shmem->am;	jmap CGI_LINE;	;			  | 44 CGI textured & fat vectors.
	incw cmdptr,cmdptr;	;		jmap XF_LINE_FLT_2D; ;			| 45 
	incw cmdptr,cmdptr;	;		jmap XF_LINE_FLT_3D; ;			| 46
	incw cmdptr,cmdptr;	;		jmap XF_LINE_INT_3D; ;			| 47
	subw,s d, fbindx, y;	shmem->am;	jmap PR_POLYTEX; ;			| 48
	subw,s d, fbindx, y;	shmem->am;	jmap PR_ROPTEX1; ;			| 49
	;			;		jmap PR_ROPTEX8; ;			| 50
	rolw 9, acc, acc;	;		jmap SET_TEXFRAME; ;			| 51
	;			;		jmap SET_TEX;	;			| 52
	add2nw 1, cmdptr, cmdptr; ;		jmap SET_SXSYSCRN; ;			| 53
	movw 0, y;		am->fpdp;	jmap SET_TEXOFF2D; ;			| 54
	movw 0, y;		am->fpdp;	jmap SET_TEXOFF3D; ;			| 55
	;			;		jmap badcmd;	;			| 56
	incw cmdptr,cmdptr;	;		jmap XF_LINE_INT_2D; ;			  | 57  
	movw d,r[11];		shmem->am;	jmap XF_PGON_INT_2D; ;			  | 58 (r[11] is nbnds)
	movw d,r[11];		shmem->am;	jmap PROC_PGON_INT_2D;;			  | 59 (r[11] is nbnds)
	negw d,countr;		shmem->am;	jmap PROC_LINE_FLT_2D;;			  | 60	
	negw d,countr;		shmem->am;	jmap PROC_LINE_INT_2D;;			  | 61
	negw d,countr;		shmem->am;	jmap PROC_LINE_INT_3D;;			  | 62
	movw d,r[11];		shmem->am;	jmap PROC_PGON_INT_3D;;			  | 63

stop
badcmd:	;			;		cjp,go .;	;			  | hang GP until restarted


|	btstw,s	7,cmd;		;		jmap EOCL;	;
EOCL:	andw d,postptr,acc;	BUFLMSK->am;	push,~go;	;
	;			PPACK->fifo1;	loop,f1nf;	;
	movw postptr,y;		am->fifo1;	cjp,f1f .;	;
freebf:	movw,s d,r[0];		shmem->am;	cjp,zer vpidle;	;		shp+
	movw,s d,r[1];		shmem->am;	cjp,zer frbf2;	;
frbf1:	;			BUFVEC1->shmemp;;		;
	xorw d,r[0],r[0];	shmem->am;	;		;
	movw r[0],y;		am->shmem;	cjp,zer vpidle;	;
frbf2:	;			BUFVEC2->shmemp;;		;
	xorw d,r[1],r[1];	shmem->am;	;		;
	movw r[1],y;		am->shmem;	cjp,go vpidle;	;


|	rolw 9,acc,acc;		;		jmap USEFRAME;	;
USEFRAME: andw d,acc,frameptr;	0x0E00->am;	;		;
	addw d,frameptr,frameptr;0x3000->am;	;		;
	incw cmdptr,cmdptr;	;		jmap getcmd;	;


wrfifo:	movw acc,y;		am->fifo1;	crtn,f1nf;	;
	;			;		cjp,go wrfifo;	;


			| set up shmemp, fpdp, and counter prior to call
	;			shmem->fpregl;	;		;		shp+,dp+
shm_to_fpr: ;			shmem->fpregh;	rpct .-1;	;		shp+
	;			shmem->fpregl;	crtn,go;	;		shp+,dp+


getfbaddr: andw d,acc,fbindx;	0x3->am;	;		;
	addw d,fbindx,acc;	=cg2_board_addr0->am;;		;
	movw acc,y;		am->brreg;	;		;
	;			;		cjs,go;		;
	;			;		cjs,neg getvalidfb;;
	;			;		push,~go;	;
	;			PPFBADDR->fifo1;loop,f1nf;	;			  | send PPFBADDR command to PP
	movw acc,y;		am->fifo1;	cjp,f1f .;	;			  | send address
	;			;		crtn,go;	;


getvalidfb: movw 0,fbindx;	;		cjs,go cg2_board_addr0;;		  | cycle through all 4 boards until a
	;			;		crtn,~neg;	;			  | valid address is found;  set fbindx to
	incw fbindx,fbindx;	;		cjs,go cg2_board_addr1;;		  | correspond to this address;  return
	;			;		crtn,~neg;	;			  | top 8 bits of address in acc
	incw fbindx,fbindx;	;		cjs,go cg2_board_addr2;;
	;			;		crtn,~neg;	;
	incw fbindx,fbindx;	;		cjs,go cg2_board_addr3;;
	;			;		crtn,~neg;	;
	;			;		cjp,go getvalidfb;;			  | try again until succeed


#undef postoffset
#undef countr


#include "pixrect.vp.u"
#include "attributes.vp.u"
#include "recip.vp.u"
#include "cgi.vp.u"
#include "2Dfp.vp.u"
#include "3Dfp.vp.u"
#include "polyscan.vp.u"
#include "gbuffer.vp.u"
#include "statpixrect.vp.u"
#include "statatts.vp.u"
